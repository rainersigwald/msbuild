<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" InitialTargets="_RestoreBuildToolsWrapper" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Inline task to bootstrap the build to enable downloading nuget.exe -->
  <UsingTask TaskName="DownloadFile" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <Address ParameterType="System.String" Required="true"/>
      <FileName ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System" />
      <Reference Include="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            var filename = FileName.Replace('\\', Path.DirectorySeparatorChar);
            var directory = System.IO.Path.GetDirectoryName(filename);
            Directory.CreateDirectory(directory);

            var tempFile = Path.Combine(directory, Path.GetRandomFileName());
            var client = new System.Net.WebClient();
            client.Proxy = System.Net.WebRequest.DefaultWebProxy;
            client.Proxy.Credentials = System.Net.CredentialCache.DefaultCredentials;
            client.DownloadFile(Address, tempFile);

            try
            {
                if (!File.Exists(filename))
                   File.Move(tempFile, filename);
            }
            finally
            {
              if (File.Exists(tempFile))
                  File.Delete(tempFile);
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <!--
    Needed to avoid the InitialTargets from having an Output which ends up getting
    added to the output references when you have a project to project reference.
  -->
  <Target Name="_RestoreBuildToolsWrapper" DependsOnTargets="_DisplayBuildInfo;_RestoreBuildTools" />

  <Target Name="_DisplayBuildInfo">
    <Message Importance="High" Text="Build binary target directory: '$(BaseOutputPathWithConfig)'" />
  </Target>

  <Target Name="_CopyCompilers" AfterTargets="_RestoreBuildTools" Condition="'$(UseRoslynCompilers)' == 'true'">
    <ItemGroup>
      <BuildFiles Include="$(PackagesDir)Microsoft.Net.ToolsetCompilers*\build\*" />
      <ToolsFiles Include="$(PackagesDir)Microsoft.Net.ToolsetCompilers*\tools\*" />
    </ItemGroup>

    <Copy
      SourceFiles="@(BuildFiles);@(ToolsFiles)"
      DestinationFolder="$(OutputPath)tools"
      SkipUnchangedFiles="true"
    />
    <Exec Condition="'$(OS)' != 'Windows_NT'" Command="find '$(OutputPath)tools' -name &quot;*.exe&quot; -exec chmod &quot;+x&quot; '{}' ';'" />
  </Target>

  <Target Name="_CopyCompilers" AfterTargets="_RestoreBuildTools" Condition="'$(UseRoslynCompilers)' == 'true'">
    <ItemGroup>
      <BuildFiles Include="$(PackagesDir)Microsoft.Net.ToolsetCompilers*\build\*" />
      <ToolsFiles Include="$(PackagesDir)Microsoft.Net.ToolsetCompilers*\tools\*" />
    </ItemGroup>

    <Copy
      SourceFiles="@(BuildFiles);@(ToolsFiles)"
      DestinationFolder="$(OutputPath)tools"
      SkipUnchangedFiles="true"
    />
    <Exec Condition="'$(OS)' != 'Windows_NT'" Command="find '$(OutputPath)tools' -name &quot;*.exe&quot; -exec chmod &quot;+x&quot; '{}' ';'" />
  </Target>

  <Target Name="_RestoreBuildTools"
          Inputs="$(MSBuildThisFileFullPath);$(MSBuildThisFileDirectory)dir.props"
          Outputs="$(ToolsDir)Microsoft.DotNet.Build.Tasks.dll;$(NugetToolPath)">

    <DownloadFile FileName="$(NuGetToolPath)"
                  Address="http://nuget.org/nuget.exe"
                  Condition="!Exists('$(NuGetToolPath)') AND '$(OS)' == 'Windows_NT'" />

    <Exec Command="curl -sSL --create-dirs -s -o $(NuGetToolPath) https://api.nuget.org/downloads/nuget.exe" Condition="!Exists('$(NuGetToolPath)') AND '$(OS)' != 'Windows_NT'" />

    <!-- Restore build tools -->
    <!--
    <Exec Command="$(NugetRestoreCommand) &quot;$(SourceDir).nuget/packages.config&quot;" StandardOutputImportance="Low" />
    -->
    <Exec Command="$(NugetRestoreCommand) &quot;$(SourceDir).nuget/packages.config&quot;" />
    <Error Condition="'$(ErrorIfBuildToolsRestoredFromIndividualProject)'=='true'"
           Text="The build tools package was just restored and so we cannot continue the build of an individual project because targets from the build tools package were not able to be imported. Please retry the build the individual project again." />
  </Target>

  <!-- Get access to the xunit task from the globally-installed location -->
  <!-- <Import Project="packages\xunit.runner.msbuild.2.1.0-beta4-build3109\build\portable-net45+netcore45+wp8+wpa81\xunit.runner.msbuild.props" -->
  <!--         Condition="Exists('packages\xunit.runner.msbuild.2.1.0-beta4-build3109\build\portable-net45+netcore45+wp8+wpa81\xunit.runner.msbuild.props') AND '$(IsTestProject)" /> -->

  <!-- <Target Name="Test" -->
  <!--         DependsOnTargets="Build" -->
  <!--         Condition="'$(IsTestProject)' == 'true'"> -->
  <!--   <xunit Assemblies="@(MainAssembly)" -->
  <!--          ShadowCopy="false" /> -->
  <!-- </Target> -->

  <!-- <Target Name="BuildAndTest" -->
  <!--         DependsOnTargets="Build;Test" /> -->

</Project>
